UML: Linguagem de Modelagem Unificada.

Diagramas Estruturais:

Diagrama de classe: O Diagrama de Classes é utilizado para fazer a representação de, estruturas de classes de negócio, interfaces e outros componentes do sistema. Por esta característica, este diagrama é considerado o mais importante para a UML, pois auxilia a maioria dos demais diagramas.

Diagrama de objetos: Este diagrama, representa os objetos existentes em um determinado instante ou fato na aplicação. Assim, conseguimos ter uma perspectiva do estado de nossos objetos, mediante a interação dos usuários no sistema.

DIAGRAMA DE CLASSES:
O diagrama de classes, ilustra graficamente como classes serão estruturadas e interligadas entre si, diante da proposta
do nosso software.

Em diagrama, a estrutura das classes é constituída por:
Identificação: Nome e/ou finalidade da classe;
Atributos: Propriedades e/ou características;
Operações: Ações e/ou métodos.
Relacionamentos

Em um diagrama, as classes podem existir de forma independente, mas obviamente haverá, em alguma etapa da aplicação a necessidade de algumas se relacionarem, o que devemos compreender é, o nível de dependência entre elas:

Associação
Uma associação, define um relacionamento entre duas classes, permitindo que, um objeto tenha acesso a estrutura de um
outro objeto.
Link da imagem: https://3025166959-files.gitbook.io/~/files/v0/b/gitbook-x-prod.appspot
.com/o/spaces%2FjFR9F4NToQ6FD39fU3wC%2Fuploads%2Fgit-blob-5681df722d3bbe15cca7d948c3ec9f0842e5a2a6%2Fimage%20(7)%20(1).png?alt=media

Agregação: Em uma agregação, a classe principal contém uma relação com outra classe, mas ela pode existir, sem a classe
agregadora. Imagina um cadastro de Candidatos, podemos encontrar candidatos que ainda não possuam uma profissão.
Link da imagem: https://3025166959-files.gitbook.io/~/files/v0/b/gitbook-x-prod.appspot
.com/o/spaces%2FjFR9F4NToQ6FD39fU3wC%2Fuploads%2Fgit-blob-f87b64ba00e44eac19debada84b5ef08c56b7e7e%2Fimage%20(10)%20(1).png?alt=media

Composição: A composição já caracteriza uma dependência existencial, entre a classe principal e a classe associada. Imaginamos que uma admissão só poderá existir, contendo suas informações básicas e a composição do candidato selecionado.
Link da imagem: https://3025166959-files.gitbook.io/~/files/v0/b/gitbook-x-prod.appspot
.com/o/spaces%2FjFR9F4NToQ6FD39fU3wC%2Fuploads%2Fgit-blob-f249b98688e95959b0c0b3e616654a6ce7d02105%2Fimage%20(1)%20(1).png?alt=media

Multiplicidade
Nem sempre o relacionamento entre as classes, será de um para um, em um determinado cenário poderá exigir multiplicidades específicas, conforme opções abaixo:

1. -> Representa uma associação, contendo um elemento;
*. -> Representa uma associação, contendo uma lista de elementos;
0..1 -> Representa uma associação, contendo zero ou um elemento;
0..* -> Representa uma associação, contendo zero ou uma lista de elementos;
1..* -> Representa uma associação. contendo um ou uma lista de elementos.

Visibilidade
Os atributos e métodos de uma classe, podem receber níveis de visibilidade, e na UML existem símbolos que representam cada um deles.

(+) Visibilidade pública;
(#) Visibilidade protegida (muito associada com herança);
(-) Visibilidade privada.

Representação do UML:
Link da imagem: https://3025166959-files.gitbook.io/~/files/v0/b/gitbook-x-prod.appspot
.com/o/spaces%2FjFR9F4NToQ6FD39fU3wC%2Fuploads%2Fgit-blob-b38fcec2347903449b3e5c98b2986f6f3cb96f4f%2Fimage%20(6).png?alt=media

Ferramentas UML:
*Draw.io
*astah
*Lucidchart
*starUML
